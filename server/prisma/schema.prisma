// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schem

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //url      = "postgresql://postgres:postgres@localhost:5432/postgres?schema=public"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByRelation", "selectRelationCount"]
}

// Report Entity
model Report {
  id          Int      @id @default(autoincrement())
  email       String
  description String
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // Model Overwrites
  @@map(name: "report")
}

// User Entity
enum UserType {
  ADMIN
  BUSINESS
  PERSONAL
  MUNICIPAL

  @@map(name: "user_type")
}

enum AdType {
  BASIC
  EXTRA

  @@map(name: "ad_type")
}

model UserRole {
  // keys
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relations
  users User[]
}

model UserGeo {
  // keys
  id     Int    @id @default(autoincrement())
  userId String @map("user_id")

  // Columns
  lat        Decimal?
  lon        Decimal?
  work_lat   Decimal?
  work_lon   Decimal?
  school_lat Decimal?
  school_lon Decimal?
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relationships
  user User @relation(fields: [userId], references: [id])

  @@map(name: "user_geo")
}

model UserAddress {
  // keys
  id     Int    @id @default(autoincrement())
  userId String @map("user_id")

  // Columns
  streetAddress  String?  @map("street_address")
  streetAddress2 String?  @map("street_address_2")
  city           String?
  country        String?
  postalCode     String?  @map("postal_code")
  createdAt      DateTime @default(now()) @map(name: "created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relationships
  user User @relation(fields: [userId], references: [id])

  @@map(name: "user_address")
}

model User {
  // Keys
  id                     String   @id @default(cuid())
  userRoleId             Int?     @map("user_role_id")
  userType               UserType @default(ADMIN) @map("user_type")
  userSegmentId          Int?     @map("user_segment_id")
  userHomeSubsegmentId   Int?     @map("user_home_subsegment_id")
  userSchoolSubsegmentId Int?     @map("user_school_subsegment_id")
  userWorkSubsegmentId   Int?     @map("user_work_subsegment_id")

  // Fields
  email                String                @unique
  password             String
  fname                String?               @map("f_name")
  lname                String?               @map("l_name")
  createdAt            DateTime              @default(now()) @map(name: "created_at")
  updatedAt            DateTime              @default(now()) @updatedAt @map(name: "updated_at")
  imagePath            String?
  passCode             String?               @default(cuid())
  // Relationships
  address              UserAddress?
  geo                  UserGeo?
  userRole             UserRole?             @relation(fields: [userRoleId], references: [id])
  ideas                Idea[]                @relation("author")
  championedIdeas      Idea[]                @relation("champion")
  userSegment          Segments?             @relation(fields: [userSegmentId], references: [segId])
  userHomeSubsegment   SubSegments?          @relation("HomeSubsegment", fields: [userHomeSubsegmentId], references: [id])
  userSchoolSubsegment SubSegments?          @relation("SchoolSubsegment", fields: [userSchoolSubsegmentId], references: [id])
  userWorkSubsegment   SubSegments?          @relation("WorkSubsegment", fields: [userWorkSubsegmentId], references: [id])
  // championedIdeas     Idea[]                @relation("championedIdeas")
  ideaRatings          IdeaRating[]
  ideaComments         IdeaComment[]
  ideaCommentLikes     UserCommentLikes[]
  ideaCommentDislikes  UserCommentDislikes[]


  // Model overwrites
  Advertisements Advertisements[]
  UserSegments   UserSegments[]
  @@map(name: "user")
}

// user segment entity
model UserSegments {
  id                 String       @id @default(cuid())
  userId             String       @map("user_id")
  user               User         @relation(fields: [userId], references: [id])
  homeSegmentId      Int?         @map("home_segment_id")
  workSegmentId      Int?         @map("work_segment_id")
  schoolSegmentId    Int?         @map("school_segment_id")
  homeSubsegmentId   Int?         @map("home_sub_segment")
  workSubSegmentId   Int?         @map("work_sub_segment")
  schoolSubSegmentId Int?         @map("school_sub_segment")
  homeSegment        Segments?    @relation("homeSegment", fields: [homeSegmentId], references: [segId])
  workSegment        Segments?    @relation("workSegment", fields: [workSegmentId], references: [segId])
  schoolSegment      Segments?    @relation("schoolSegment", fields: [schoolSegmentId], references: [segId])
  homeSubSegment     SubSegments? @relation("homeSubSegment", fields: [homeSubsegmentId], references: [id])
  workSubSegment     SubSegments? @relation("workSubSegment", fields: [workSubSegmentId], references: [id])
  schoolSubSegment   SubSegments? @relation("schoolSubSegment", fields: [schoolSubSegmentId], references: [id])
}

// Category entity
model Category {
  // keys
  id Int @id @default(autoincrement())

  // Fields
  title       String   @unique
  description String?
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relations
  ideas Idea[]

  @@map(name: "category")
}

// Idea Entity
enum IdeaState {
  IDEA
  PROPOSAL
  PROJECT

  @@map(name: "idea_state")
}

model IdeaGeo {
  // keys
  id     Int @id @default(autoincrement())
  ideaId Int @map("idea_id")

  // Columns
  lat       Decimal?
  lon       Decimal?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relationships
  idea Idea @relation(fields: [ideaId], references: [id])

  @@map(name: "idea_geo")
}

model IdeaAddress {
  // keys
  id     Int @id @default(autoincrement())
  ideaId Int @map("idea_id")

  // Columns
  streetAddress  String?  @map("street_address")
  streetAddress2 String?  @map("street_address_2")
  city           String?
  country        String?
  postalCode     String?  @map("postal_code")
  createdAt      DateTime @default(now()) @map(name: "created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relationships
  idea Idea @relation(fields: [ideaId], references: [id])

  @@map(name: "idea_address")
}

model Idea {
  // Keys
  id         Int     @id @default(autoincrement())
  authorId   String  @map("author_id")
  championId String? @map("champion_id")
  categoryId Int     @map("category_id")

  // Values
  title               String
  description         String
  communityImpact     String?   @map("community_impact")
  natureImpact        String?   @map("nature_impact")
  artsImpact          String?   @map("arts_impact")
  energyImpact        String?   @map("energy_impact")
  manufacturingImpact String?   @map("manufacturing_impact")
  state               IdeaState @default(IDEA)
  active              Boolean   @default(true)
  createdAt           DateTime  @default(now()) @map(name: "created_at")
  updatedAt           DateTime  @default(now()) @updatedAt @map(name: "updated_at")

  // relations
  comments     IdeaComment[]
  ratings      IdeaRating[]
  proposalInfo Proposal?
  projectInfo  Project?
  address      IdeaAddress?
  geo          IdeaGeo?

  // Multiple relationships pointing to same User Model
  // https://github.com/prisma/prisma/discussions/2073
  author   User     @relation("author", fields: [authorId], references: [id])
  champion User?    @relation("champion", fields: [championId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@map(name: "idea")
}

model Proposal {
  // Keys
  id     Int @id @default(autoincrement())
  ideaId Int @map("idea_id")

  // Fields
  // TODO: Add fields that would be in Proposal state
  description String?
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // Relations
  idea Idea @relation(fields: [ideaId], references: [id])

  @@map(name: "proposal")
}

model Project {
  // keys
  id     Int @id @default(autoincrement())
  ideaId Int @map("idea_id")

  // fields
  // TODO: Add fields that would be in Project state
  description String?
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relations
  idea Idea @relation(fields: [ideaId], references: [id])

  @@map(name: "project")
}

model IdeaRating {
  // Keys
  id       Int    @id @default(autoincrement())
  ideaId   Int    @map("idea_id")
  authorId String @map("author_id")

  // Fields
  rating            Int      @default(0)
  ratingExplanation String?  @map("rating_explanation")
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relations
  author User @relation(fields: [authorId], references: [id])
  idea   Idea @relation(fields: [ideaId], references: [id])

  @@map(name: "idea_rating")
}

model IdeaComment {
  // keys
  id     Int @id @default(autoincrement())
  ideaId Int @map("idea_id")

  // Fields
  authorId  String   @map("author_id")
  content   String
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relations
  author   User                  @relation(fields: [authorId], references: [id])
  idea     Idea                  @relation(fields: [ideaId], references: [id])
  likes    UserCommentLikes[]
  dislikes UserCommentDislikes[]

  @@map(name: "idea_comment")
}

model UserCommentLikes {
  id            Int     @id @default(autoincrement())
  ideaCommentId Int?    @map("idea_comment_id")
  authorId      String? @map("author_id")

  ideaComment IdeaComment? @relation(fields: [ideaCommentId], references: [id])
  author      User?        @relation(fields: [authorId], references: [id])

  @@map(name: "user_comment_likes")
}

model UserCommentDislikes {
  id            Int     @id @default(autoincrement())
  ideaCommentId Int?    @map("idea_comment_id")
  authorId      String? @map("author_id")

  ideaComment IdeaComment? @relation(fields: [ideaCommentId], references: [id])
  author      User?        @relation(fields: [authorId], references: [id])

  @@map(name: "user_comment_dislikes")
}

model Advertisements {
  id       Int       @id @default(autoincrement())
  ownerId  String    @map("owner_id")
  createAt DateTime  @default(now()) @map("creat_at")
  updateAt DateTime? @default(now()) @updatedAt @map("update_at")

  adTitle      String   @map("advertisement_title")
  adType       AdType   @default(BASIC) @map("advertisement_type")
  duration     DateTime @map("advertisement_duration")
  adPosition   String   @map("advertisement_position")
  imagePath    String   @map("advertisement_image_path")
  externalLink String   @map("advertisement_external_link")
  published    Boolean  @default(false) @map("published")

  author User? @relation(fields: [ownerId], references: [id])

  @@map(name: "advertisement")
}

model Segments {
  segId        Int       @id @default(autoincrement()) @map("seg_id")
  country      String
  province     String
  name         String    @map("segment_name")
  superSegName String?   @map("super_segment_name")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @default(now()) @updatedAt @map("update_at")

  SubSegments    SubSegments[]
  homeSegments   UserSegments[] @relation("homeSegment")
  workSegments   UserSegments[] @relation("workSegment")
  schoolSegments UserSegments[] @relation("schoolSegment")
  @@map(name: "segment")
  User User[]
}

model SubSegments {
  id        Int       @id @default(autoincrement())
  segId     Int       @map("seg_id")
  name      String    @map("sub_segment_name")
  lat       Decimal?
  lon       Decimal?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @updatedAt @map("update_at")

  segRef            Segments       @relation(fields: [segId], references: [segId])
  homeSubSegments   UserSegments[] @relation("homeSubSegment")
  workSubSegments   UserSegments[] @relation("workSubSegment")
  schoolSubSegments UserSegments[] @relation("schoolSubSegment")

  @@map(name: "sub_segment")
}
